name: Build FFmpeg for Linux and Windows

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          # Linux builds
          - name: linux-x86_64
            os: ubuntu-latest
            target_os: linux
            arch: x86_64
            cc: gcc
            cxx: g++
            configure_arch: x86_64
            cpu: x86-64
            openssl_arch: linux-x86_64
            packages: ""
            cross_prefix: ""
            
          - name: linux-arm64
            os: ubuntu-latest
            target_os: linux
            arch: arm64
            cc: aarch64-linux-gnu-gcc
            cxx: aarch64-linux-gnu-g++
            configure_arch: aarch64
            cpu: armv8-a
            openssl_arch: linux-aarch64
            packages: "gcc-aarch64-linux-gnu g++-aarch64-linux-gnu"
            cross_prefix: aarch64-linux-gnu-
            
          - name: linux-armv7
            os: ubuntu-latest
            target_os: linux
            arch: armv7
            cc: arm-linux-gnueabihf-gcc
            cxx: arm-linux-gnueabihf-g++
            configure_arch: arm
            cpu: armv7-a
            openssl_arch: linux-armv4
            packages: "gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf"
            cross_prefix: arm-linux-gnueabihf-
            
          # Windows builds
          - name: windows-x86_64
            os: ubuntu-latest
            target_os: mingw32
            arch: x86_64
            cc: x86_64-w64-mingw32-gcc
            cxx: x86_64-w64-mingw32-g++
            configure_arch: x86_64
            cpu: x86-64
            openssl_arch: mingw64
            packages: "gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64"
            cross_prefix: x86_64-w64-mingw32-
            
          - name: windows-x86
            os: ubuntu-latest
            target_os: mingw32
            arch: x86
            cc: i686-w64-mingw32-gcc
            cxx: i686-w64-mingw32-g++
            configure_arch: x86
            cpu: i686
            openssl_arch: mingw
            packages: "gcc-mingw-w64-i686 g++-mingw-w64-i686"
            cross_prefix: i686-w64-mingw32-
            
      fail-fast: false
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y --fix-missing \
          build-essential \
          pkg-config \
          ninja-build \
          yasm \
          nasm \
          autoconf \
          automake \
          libtool \
          cmake \
          perl \
          ${{ matrix.packages }} || \
        sudo apt-get install -y --fix-missing \
          build-essential \
          pkg-config \
          ninja-build \
          yasm \
          nasm \
          autoconf \
          automake \
          libtool \
          cmake \
          perl \
          ${{ matrix.packages }}

    - name: Build OpenSSL
      run: |
        git clone --depth 1 --branch openssl-3.0.12 https://github.com/openssl/openssl.git
        cd openssl
        
        # Create installation directory
        mkdir -p ${{ github.workspace }}/prebuilt/${{ matrix.name }}/openssl
        
        # Set environment for cross-compilation
        if [ "${{ matrix.target_os }}" = "mingw32" ]; then
          export CC=${{ matrix.cc }}
          export CXX=${{ matrix.cxx }}
          export AR=${{ matrix.cross_prefix }}ar
          export RANLIB=${{ matrix.cross_prefix }}ranlib
          export RC=${{ matrix.cross_prefix }}windres
          CROSS_PREFIX=""
        else
          CROSS_PREFIX="--cross-compile-prefix=${{ matrix.cross_prefix }}"
        fi
        
        # Configure OpenSSL
        ./Configure ${{ matrix.openssl_arch }} \
          --prefix=${{ github.workspace }}/prebuilt/${{ matrix.name }}/openssl \
          --openssldir=${{ github.workspace }}/prebuilt/${{ matrix.name }}/openssl \
          $CROSS_PREFIX \
          no-shared \
          no-tests
        
        # Build and install
        make -j$(nproc)
        make install_sw

    - name: Fix OpenSSL lib directory and create pkg-config files
      run: |
        SSL_PREFIX="${{ github.workspace }}/prebuilt/${{ matrix.name }}/openssl"
        
        # Check if OpenSSL installed to lib64 instead of lib
        if [ -d "$SSL_PREFIX/lib64" ] && [ ! -d "$SSL_PREFIX/lib" ]; then
          echo "=== Moving lib64 to lib ==="
          mv "$SSL_PREFIX/lib64" "$SSL_PREFIX/lib"
        fi
        
        # Ensure lib directory exists
        mkdir -p "$SSL_PREFIX/lib"
        
        # For Windows, create pkg-config files
        if [ "${{ matrix.target_os }}" = "mingw32" ]; then
          mkdir -p "$SSL_PREFIX/lib/pkgconfig"
          
          # Create openssl.pc
          cat > "$SSL_PREFIX/lib/pkgconfig/openssl.pc" << EOF
        prefix=${SSL_PREFIX}
        exec_prefix=\${prefix}
        libdir=\${exec_prefix}/lib
        includedir=\${prefix}/include
        
        Name: OpenSSL
        Description: Secure Sockets Layer and cryptography libraries and tools
        Version: 3.0.12
        Requires: libssl libcrypto
        EOF
          
          # Create libssl.pc
          cat > "$SSL_PREFIX/lib/pkgconfig/libssl.pc" << EOF
        prefix=${SSL_PREFIX}
        exec_prefix=\${prefix}
        libdir=\${exec_prefix}/lib
        includedir=\${prefix}/include
        
        Name: OpenSSL-libssl
        Description: Secure Sockets Layer and cryptography libraries
        Version: 3.0.12
        Requires: libcrypto
        Libs: -L\${libdir} -lssl
        Libs.private: -lws2_32 -lgdi32 -lcrypt32
        Cflags: -I\${includedir}
        EOF
          
          # Create libcrypto.pc
          cat > "$SSL_PREFIX/lib/pkgconfig/libcrypto.pc" << EOF
        prefix=${SSL_PREFIX}
        exec_prefix=\${prefix}
        libdir=\${exec_prefix}/lib
        includedir=\${prefix}/include
        
        Name: OpenSSL-libcrypto
        Description: OpenSSL cryptography library
        Version: 3.0.12
        Libs: -L\${libdir} -lcrypto
        Libs.private: -lws2_32 -lgdi32 -lcrypt32
        Cflags: -I\${includedir}
        EOF
        fi

    - name: Verify OpenSSL installation
      run: |
        echo "=== OpenSSL installation verification ==="
        ls -la ${{ github.workspace }}/prebuilt/${{ matrix.name }}/openssl/
        echo "=== Include directory ==="
        ls -la ${{ github.workspace }}/prebuilt/${{ matrix.name }}/openssl/include/
        echo "=== Lib directory ==="
        ls -la ${{ github.workspace }}/prebuilt/${{ matrix.name }}/openssl/lib/
        if [ "${{ matrix.target_os }}" = "mingw32" ]; then
          echo "=== PKG_CONFIG_PATH test ==="
          export PKG_CONFIG_PATH=${{ github.workspace }}/prebuilt/${{ matrix.name }}/openssl/lib/pkgconfig:$PKG_CONFIG_PATH
          pkg-config --exists openssl && echo "OpenSSL pkg-config found" || echo "OpenSSL pkg-config NOT found"
          pkg-config --exists libssl && echo "libssl pkg-config found" || echo "libssl pkg-config NOT found"  
          pkg-config --exists libcrypto && echo "libcrypto pkg-config found" || echo "libcrypto pkg-config NOT found"
          echo "=== pkg-config output ==="
          pkg-config --cflags --libs openssl || echo "Failed to get OpenSSL flags"
          echo "=== pkg-config files content ==="
          ls -la ${{ github.workspace }}/prebuilt/${{ matrix.name }}/openssl/lib/pkgconfig/
          echo "--- openssl.pc ---"
          cat ${{ github.workspace }}/prebuilt/${{ matrix.name }}/openssl/lib/pkgconfig/openssl.pc || echo "No openssl.pc"
        fi

    - name: Download and Extract FFmpeg
      run: |
        git clone https://github.com/FFmpeg/FFmpeg.git ffmpeg
        cd ffmpeg
        git checkout release/6.1

    - name: Build FFmpeg
      working-directory: ffmpeg
      run: |
        export PKG_CONFIG_PATH=${{ github.workspace }}/prebuilt/${{ matrix.name }}/openssl/lib/pkgconfig:$PKG_CONFIG_PATH
        export SSL_DIR=${{ github.workspace }}/prebuilt/${{ matrix.name }}/openssl
        
        echo "=== Environment verification ==="
        echo "PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
        echo "SSL_DIR: $SSL_DIR"
        
        # Test if OpenSSL can be found
        if [ "${{ matrix.target_os }}" = "mingw32" ]; then
          echo "=== Testing pkg-config before FFmpeg configure ==="
          pkg-config --exists openssl && echo "✓ OpenSSL found" || echo "✗ OpenSSL NOT found"
          pkg-config --cflags openssl || echo "Failed to get cflags"
          pkg-config --libs openssl || echo "Failed to get libs"
        fi
        
        # Base configuration
        CONFIGURE_FLAGS="
          --prefix=${{ github.workspace }}/prebuilt/${{ matrix.name }}/ffmpeg
          --pkg-config=pkg-config
          --enable-version3
          --target-os=${{ matrix.target_os }}
          --arch=${{ matrix.configure_arch }}
          --cpu=${{ matrix.cpu }}
          --enable-gpl
          --enable-nonfree
          --enable-openssl
          --enable-protocol=http
          --enable-protocol=https
          --enable-protocol=file
          --enable-protocol=tcp
          --extra-cflags=-I$SSL_DIR/include
          --extra-ldflags=-L$SSL_DIR/lib
          --enable-pic
          --enable-optimizations
          --enable-swscale
          --enable-static
          --disable-shared
          --enable-pthreads
          --disable-debug
          --disable-doc
          --disable-htmlpages
          --disable-manpages
          --disable-podpages
          --disable-txtpages
        "
        
        # Cross-compilation flags
        if [ "${{ matrix.cross_prefix }}" != "" ]; then
          CONFIGURE_FLAGS="$CONFIGURE_FLAGS
            --enable-cross-compile
            --cross-prefix=${{ matrix.cross_prefix }}
            --cc=${{ matrix.cc }}
            --cxx=${{ matrix.cxx }}
          "
        fi
        
        # Windows-specific flags
        if [ "${{ matrix.target_os }}" = "mingw32" ]; then
          CONFIGURE_FLAGS="$CONFIGURE_FLAGS
            --disable-w32threads
            --enable-pthreads
            --extra-libs=-lpthread
            --extra-libs=-lws2_32
            --extra-libs=-lwinmm
            --extra-libs=-lole32
            --extra-libs=-lstrmiids
            --extra-libs=-luuid
            --extra-libs=-lgdi32
            --extra-libs=-lcrypt32
          "
        fi
        
        # ARM-specific optimizations (Linux only)
        if [ "${{ matrix.target_os }}" = "linux" ]; then
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            CONFIGURE_FLAGS="$CONFIGURE_FLAGS --enable-neon"
          elif [ "${{ matrix.arch }}" = "armv7" ]; then  
            CONFIGURE_FLAGS="$CONFIGURE_FLAGS 
              --enable-neon
              --extra-cflags=-mfpu=neon
              --extra-cflags=-mfloat-abi=hard
            "
          fi
        fi
        
        # Configure FFmpeg
        echo "=== Configuring FFmpeg ==="
        ./configure $CONFIGURE_FLAGS
        
        # Build
        make clean
        make -j$(nproc)
        make install

    - name: Create tarball
      run: |
        cd ${{ github.workspace }}/prebuilt/${{ matrix.name }}/ffmpeg
        if [ "${{ matrix.target_os }}" = "mingw32" ]; then
          # For Windows, create a zip file
          zip -r ../../../ffmpeg-${{ matrix.name }}.zip .
        else
          # For Linux, create a tarball
          tar -czf ../../../ffmpeg-${{ matrix.name }}.tar.gz .
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-${{ matrix.name }}
        path: |
          ${{ github.workspace }}/prebuilt/${{ matrix.name }}/ffmpeg/
          ${{ github.workspace }}/ffmpeg-${{ matrix.name }}.*

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          ffmpeg-*/ffmpeg-*.*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
