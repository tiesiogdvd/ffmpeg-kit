name: Build FFmpeg with Platform-Native TLS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          # Linux builds (using GnuTLS instead of OpenSSL)
          - name: linux-x86_64
            os: ubuntu-latest
            target_os: linux
            arch: x86_64
            cc: gcc
            cxx: g++
            configure_arch: x86_64
            cpu: x86-64
            packages: "libgnutls28-dev"
            cross_prefix: ""
            tls_backend: gnutls
            
          - name: linux-arm64
            os: ubuntu-latest
            target_os: linux
            arch: arm64
            cc: aarch64-linux-gnu-gcc
            cxx: aarch64-linux-gnu-g++
            configure_arch: aarch64
            cpu: armv8-a
            packages: "gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libgnutls28-dev:arm64"
            cross_prefix: aarch64-linux-gnu-
            tls_backend: gnutls
            
          - name: linux-armv7
            os: ubuntu-latest
            target_os: linux
            arch: armv7
            cc: arm-linux-gnueabihf-gcc
            cxx: arm-linux-gnueabihf-g++
            configure_arch: arm
            cpu: armv7-a
            packages: "gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf libgnutls28-dev:armhf"
            cross_prefix: arm-linux-gnueabihf-
            tls_backend: gnutls
            
          # Windows builds (using SChannel)
          - name: windows-x86_64
            os: ubuntu-latest
            target_os: mingw32
            arch: x86_64
            cc: x86_64-w64-mingw32-gcc
            cxx: x86_64-w64-mingw32-g++
            configure_arch: x86_64
            cpu: x86-64
            packages: "gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64"
            cross_prefix: x86_64-w64-mingw32-
            tls_backend: schannel
            
          - name: windows-x86
            os: ubuntu-latest
            target_os: mingw32
            arch: x86
            cc: i686-w64-mingw32-gcc
            cxx: i686-w64-mingw32-g++
            configure_arch: x86
            cpu: i686
            packages: "gcc-mingw-w64-i686 g++-mingw-w64-i686"
            cross_prefix: i686-w64-mingw32-
            tls_backend: schannel
            
          # macOS builds (using Secure Transport)
          - name: macos-x86_64
            os: macos-latest
            target_os: darwin
            arch: x86_64
            cc: clang
            cxx: clang++
            configure_arch: x86_64
            cpu: x86-64
            packages: ""
            cross_prefix: ""
            tls_backend: securetransport
            
          - name: macos-arm64
            os: macos-latest
            target_os: darwin
            arch: arm64
            cc: clang
            cxx: clang++
            configure_arch: arm64
            cpu: armv8-a
            packages: ""
            cross_prefix: ""
            tls_backend: securetransport
            
      fail-fast: false
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Install build dependencies (Linux)
      if: matrix.target_os == 'linux'
      run: |
        sudo apt-get update
        
        # Add additional architectures for cross-compilation
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          sudo dpkg --add-architecture arm64
        elif [ "${{ matrix.arch }}" = "armv7" ]; then
          sudo dpkg --add-architecture armhf
        fi
        
        sudo apt-get update
        sudo apt-get install -y --fix-missing \
          build-essential \
          pkg-config \
          ninja-build \
          yasm \
          nasm \
          autoconf \
          automake \
          libtool \
          cmake \
          perl \
          ${{ matrix.packages }} || \
        sudo apt-get install -y --fix-missing \
          build-essential \
          pkg-config \
          ninja-build \
          yasm \
          nasm \
          autoconf \
          automake \
          libtool \
          cmake \
          perl \
          ${{ matrix.packages }}

    - name: Install build dependencies (Windows cross-compile)
      if: matrix.target_os == 'mingw32'
      run: |
        sudo apt-get update
        sudo apt-get install -y --fix-missing \
          build-essential \
          pkg-config \
          ninja-build \
          yasm \
          nasm \
          autoconf \
          automake \
          libtool \
          cmake \
          perl \
          ${{ matrix.packages }}

    - name: Install build dependencies (macOS)
      if: matrix.target_os == 'darwin'
      run: |
        brew install pkg-config yasm nasm autoconf automake libtool cmake

    - name: Download and Extract FFmpeg
      run: |
        git clone https://github.com/FFmpeg/FFmpeg.git ffmpeg
        cd ffmpeg
        git checkout release/6.1

    - name: Build FFmpeg
      working-directory: ffmpeg
      run: |
        # Create installation directory
        mkdir -p ${{ github.workspace }}/prebuilt/${{ matrix.name }}/ffmpeg
        
        echo "=== Building FFmpeg with ${{ matrix.tls_backend }} TLS backend ==="
        
        # Base configuration
        CONFIGURE_FLAGS="
          --prefix=${{ github.workspace }}/prebuilt/${{ matrix.name }}/ffmpeg
          --pkg-config=pkg-config
          --enable-version3
          --target-os=${{ matrix.target_os }}
          --arch=${{ matrix.configure_arch }}
          --cpu=${{ matrix.cpu }}
          --enable-gpl
          --enable-nonfree
          --enable-${{ matrix.tls_backend }}
          --enable-protocol=http
          --enable-protocol=https
          --enable-protocol=file
          --enable-protocol=tcp
          --enable-pic
          --enable-optimizations
          --enable-swscale
          --enable-static
          --disable-shared
          --enable-pthreads
          --disable-debug
          --disable-doc
          --disable-htmlpages
          --disable-manpages
          --disable-podpages
          --disable-txtpages
          --disable-network
        "
        
        # Cross-compilation flags
        if [ "${{ matrix.cross_prefix }}" != "" ]; then
          CONFIGURE_FLAGS="$CONFIGURE_FLAGS
            --enable-cross-compile
            --cross-prefix=${{ matrix.cross_prefix }}
            --cc=${{ matrix.cc }}
            --cxx=${{ matrix.cxx }}
          "
        fi
        
        # Platform-specific flags
        if [ "${{ matrix.target_os }}" = "mingw32" ]; then
          # Windows with SChannel
          CONFIGURE_FLAGS="$CONFIGURE_FLAGS
            --disable-w32threads
            --enable-pthreads
            --extra-libs=-lpthread
            --extra-libs=-lws2_32
            --extra-libs=-lwinmm
            --extra-libs=-lole32
            --extra-libs=-lstrmiids
            --extra-libs=-luuid
            --extra-libs=-lgdi32
            --extra-libs=-lsecur32
            --extra-libs=-lcrypt32
          "
        elif [ "${{ matrix.target_os }}" = "darwin" ]; then
          # macOS with Secure Transport
          CONFIGURE_FLAGS="$CONFIGURE_FLAGS
            --enable-videotoolbox
            --enable-audiotoolbox
          "
          
          # macOS architecture-specific flags
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            CONFIGURE_FLAGS="$CONFIGURE_FLAGS
              --enable-cross-compile
              --target-os=darwin
              --arch=arm64
              --cc='clang -arch arm64'
              --cxx='clang++ -arch arm64'
            "
          fi
        elif [ "${{ matrix.target_os }}" = "linux" ]; then
          # Linux with GnuTLS
          CONFIGURE_FLAGS="$CONFIGURE_FLAGS"
          
          # ARM-specific optimizations
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            CONFIGURE_FLAGS="$CONFIGURE_FLAGS --enable-neon"
          elif [ "${{ matrix.arch }}" = "armv7" ]; then  
            CONFIGURE_FLAGS="$CONFIGURE_FLAGS 
              --enable-neon
              --extra-cflags=-mfpu=neon
              --extra-cflags=-mfloat-abi=hard
            "
          fi
        fi
        
        # Configure FFmpeg
        echo "=== Configuring FFmpeg ==="
        echo "Configure flags: $CONFIGURE_FLAGS"
        ./configure $CONFIGURE_FLAGS
        
        # Build
        make clean
        make -j$(nproc)
        make install

    - name: Verify build
      run: |
        echo "=== FFmpeg installation verification ==="
        ls -la ${{ github.workspace }}/prebuilt/${{ matrix.name }}/ffmpeg/
        echo "=== Lib directory ==="
        ls -la ${{ github.workspace }}/prebuilt/${{ matrix.name }}/ffmpeg/lib/
        echo "=== Bin directory ==="
        ls -la ${{ github.workspace }}/prebuilt/${{ matrix.name }}/ffmpeg/bin/ || echo "No bin directory"
        
        # Test static libraries exist
        for lib in libavformat libavcodec libavfilter libavdevice libswresample libswscale libavutil; do
          if [ -f "${{ github.workspace }}/prebuilt/${{ matrix.name }}/ffmpeg/lib/${lib}.a" ]; then
            echo "✓ ${lib}.a found"
          else
            echo "✗ ${lib}.a NOT found"
          fi
        done

    - name: Create tarball
      run: |
        cd ${{ github.workspace }}/prebuilt/${{ matrix.name }}/ffmpeg
        if [ "${{ matrix.target_os }}" = "mingw32" ]; then
          # For Windows, create a zip file
          zip -r ../../../ffmpeg-${{ matrix.name }}.zip .
        else
          # For Linux/macOS, create a tarball
          tar -czf ../../../ffmpeg-${{ matrix.name }}.tar.gz .
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-${{ matrix.name }}
        path: |
          ${{ github.workspace }}/prebuilt/${{ matrix.name }}/ffmpeg/
          ${{ github.workspace }}/ffmpeg-${{ matrix.name }}.*

  create-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          ffmpeg-*/ffmpeg-*.*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
